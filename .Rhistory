LW <- 4
lines(x = c(-100 , -130), y = c(20 , 90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #Mesoamerica
lines(x = c(-80 , -70), y = c(0 , 90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #NW_Lowland_SA
lines(x = c(-74 , -5 ), y = c(5 , 90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #N_Lowland_SA
lines(x = c(40 , 30), y = c(36 , 90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #Fertile_Cresc
lines(x = c(110 , 70), y = c(40 , 90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #Chinese_loess
lines(x = c(142 , 160), y = c(-5 , 90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #New_Guinea
lines(x = c(-85 , -130), y = c(33 , -90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #E_North_Ameri
lines(x = c(-68 , -75), y = c(-25 , -90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #C/S_Andes
lines(x = c(-10 , -20), y = c( 15, -90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #W_African_Sav
lines(x = c(25 , 40), y = c(9 , -90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #Sudanic_Savan
lines(x = c(87 , 100), y = c(20 , -90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #Ganges_E_Indi
lines(x = c(120 , 160), y = c(30 , -90), lty=2, col=adjustcolor("white", alpha=1), lwd=LW) #Lower-MiddleY
dev.off()
###################
type_number <- 8
complex_figure <- function(type_number, location_name, i, means, sds){
#polygon(x=c(-30,-30,30,30), y=c(-30,30,30,-30), col="black")
abline(h=0, lty=2)
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-3,3,3,-3), col=adjustcolor("cornflowerblue", alpha=0.2), border=NA)
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-3,3,3,-3), col=adjustcolor("cornflowerblue", alpha=0.2), border=NA)
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]
maxer <- max(match, na.rm=TRUE)
break_one_1 <- maxer
break_two_1 <- maxer - quantile(j)[2]
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)
lines(x=c(break_one_1, break_one_1), y=c(-3,3), col=adjustcolor("cornflowerblue", alpha=1), lwd=3)
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]
maxer <- max(match, na.rm=TRUE)
break_one_2 <- maxer
break_two_2 <- maxer - quantile(j)[2]
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)
lines(x=c(break_one_2, break_one_2), y=c(-3,3), col=adjustcolor("cornflowerblue", alpha=0.6), lwd=3)
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]
maxer <- max(match, na.rm=TRUE)
j <- ecdf(maxer-match)
print(j)
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))
y_seq <- c(0, j(seq(0, maxer, length.out=100)))
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))
polygon(c(0, x_seq), c(0, y_seq) -3, border="cornflowerblue", col=adjustcolor("cornflowerblue", alpha=.8))
#abline(v= maxer - quantile(j)[2])
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]
maxer <- max(match, na.rm=TRUE)
j <- ecdf(maxer-match)
print(j)
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))
y_seq <- c(0, j(seq(0, maxer, length.out=100)))
#lines(x_seq, y_seq)
polygon(c(0, x_seq), c(0, y_seq) -3, border="white", col=adjustcolor("white", alpha=1))
polygon(c(0, x_seq), c(0, y_seq) -3, border="white", col=adjustcolor("cornflowerblue", alpha=0.3))
#abline(v=11)
type <- 2
if(type == 1){
x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))
scaled <- scale(x , center=TRUE)
meanss <- scaled[1:18]
sdss_plus <- scaled[19:36]
sdss_minus <- scaled[37:54]
#abline(v=10, col="red")
length(scaled)
#lines(4:21, means[[i]] + sds[[i]])
#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")
polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")
}
if(type == 2){
#h <- 3
density_trend <- all_vectors[which(all_vectors[,1] == location_name ),]
#plot(as.numeric(density_trend[,2]), as.numeric(density_trend[,4]), col=adjustcolor("cornflowerblue", alpha=0.8),  xlab="year", ylab="Density", ylim=c(-2,2), xlim=c(4,21), type="n")
for(g in levels(as.factor(density_trend[,5]))){
subbed <- subset(density_trend, cell_ID == g)
ordered_subbed <- subbed[order(subbed$x_values), ]
lines(rev(as.numeric(ordered_subbed[,2])), as.numeric(ordered_subbed[,4]), lwd=.3, col=adjustcolor("limegreen", 0.3))
}
density_trend <- all_vectors[which(all_vectors[,1] == location_name),]
ordered_density_trend <- density_trend[order(density_trend$x_values), ]
#gammer <- loess(as.numeric(ordered_density_trend[,4]) ~ as.numeric(ordered_density_trend[,2]), span = 1)
gammer <- gam(as.numeric(ordered_density_trend[,4]) ~ s(as.numeric(ordered_density_trend[,2]), df = 3))
summary(gammer)
predict_gam <- predict(gammer, se=TRUE)
abline(h=0, lty=2, col="grey")
#lines(rev(ordered_density_trend[,2]) ,  predict_gam$fit + predict_gam$se.fit,  col="orange", lty=1, lwd=1)
#lines(rev(ordered_density_trend[,2]) ,  predict_gam$fit - predict_gam$se.fit,  col="orange", lty=1, lwd=1)
polygon(x=c(rev(ordered_density_trend[,2]), ordered_density_trend[,2] ), y=c(predict_gam$fit, rev(predict_gam$fit)), col=adjustcolor("firebrick", alpha=.5),bty="n", lwd=.2)
lines(rev(ordered_density_trend[,2]) ,predict_gam$fit,  col="firebrick", lwd=1)
}
if(type == 3){
#h <- 3
density_trend <- all_vectors[which(all_vectors[,1] == location_name ),]
#plot(as.numeric(density_trend[,2]), as.numeric(density_trend[,4]), col=adjustcolor("cornflowerblue", alpha=0.8),  xlab="year", ylab="Density", ylim=c(-2,2), xlim=c(4,21), type="n")
for(g in levels(as.factor(density_trend[,5]))){
subbed <- subset(density_trend, cell_ID == g)
ordered_subbed <- subbed[order(subbed$x_values), ]
lines(rev(as.numeric(ordered_subbed[,2])), as.numeric(ordered_subbed[,4]), lwd=.3, col=adjustcolor("limegreen", 0.3))
}
density_trend <- all_vectors[which(all_vectors[,1] == location_name),]
ordered_density_trend <- density_trend[order(density_trend$x_values), ]
gammer <- loess(as.numeric(ordered_density_trend[,4]) ~ as.numeric(ordered_density_trend[,2]), span = 1)
summary(gammer)
predict_gam <- predict(gammer, se=TRUE)
abline(h=0, lty=2, col="grey")
#lines(rev(ordered_density_trend[,2]) ,  predict_gam$fit + predict_gam$se.fit,  col="orange", lty=1, lwd=1)
#lines(rev(ordered_density_trend[,2]) ,  predict_gam$fit - predict_gam$se.fit,  col="orange", lty=1, lwd=1)
polygon(x=c(rev(ordered_density_trend[,2]), ordered_density_trend[,2] ), y=c(predict_gam$fit, rev(predict_gam$fit)), col=adjustcolor("firebrick", alpha=.5),bty="n", lwd=.2)
lines(rev(ordered_density_trend[,2]) ,predict_gam$fit,  col="firebrick", lwd=1)
}
#means_long_y <- c(1,1,1,1,1, meanss)
#means_long_x <- c(0:4, 4:21)
#	break_one <- break_one_2
#	break_two <- break_two_2
#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)
#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)
#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)
#abline(v= break_one, col="white")
#abline(v= break_two, col="white")
#	break_one <- break_one_1
#	break_two <- break_two_1
#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)
#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)
#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)
#abline(v= break_one, col="white")
#abline(v= break_two, col="white")
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white")
#lines(4:21, meanss)
#lines(21:4, meanss)
}
###################
type_number <- 8
complex_figure <- function(type_number, location_name, i, means, sds){
#polygon(x=c(-30,-30,30,30), y=c(-30,30,30,-30), col="black")
abline(h=0, lty=2)
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-3,3,3,-3), col=adjustcolor("cornflowerblue", alpha=0.2), border=NA)
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-3,3,3,-3), col=adjustcolor("cornflowerblue", alpha=0.2), border=NA)
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]
maxer <- max(match, na.rm=TRUE)
break_one_1 <- maxer
break_two_1 <- maxer - quantile(j)[2]
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)
lines(x=c(break_one_1, break_one_1), y=c(-3,3), col=adjustcolor("cornflowerblue", alpha=1), lwd=3)
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]
maxer <- max(match, na.rm=TRUE)
break_one_2 <- maxer
break_two_2 <- maxer - quantile(j)[2]
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)
lines(x=c(break_one_2, break_one_2), y=c(-3,3), col=adjustcolor("cornflowerblue", alpha=0.6), lwd=3)
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]
maxer <- max(match, na.rm=TRUE)
j <- ecdf(maxer-match)
print(j)
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))
y_seq <- c(0, j(seq(0, maxer, length.out=100)))
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))
polygon(c(0, x_seq), c(0, y_seq) -3, border="cornflowerblue", col=adjustcolor("cornflowerblue", alpha=.8))
#abline(v= maxer - quantile(j)[2])
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]
maxer <- max(match, na.rm=TRUE)
j <- ecdf(maxer-match)
print(j)
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))
y_seq <- c(0, j(seq(0, maxer, length.out=100)))
#lines(x_seq, y_seq)
polygon(c(0, x_seq), c(0, y_seq) -3, border="white", col=adjustcolor("white", alpha=1))
polygon(c(0, x_seq), c(0, y_seq) -3, border="white", col=adjustcolor("cornflowerblue", alpha=0.3))
#abline(v=11)
type <- 2
if(type == 1){
x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))
scaled <- scale(x , center=TRUE)
meanss <- scaled[1:18]
sdss_plus <- scaled[19:36]
sdss_minus <- scaled[37:54]
#abline(v=10, col="red")
length(scaled)
#lines(4:21, means[[i]] + sds[[i]])
#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")
polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")
}
if(type == 2){
#h <- 3
density_trend <- all_vectors[which(all_vectors[,1] == location_name ),]
#plot(as.numeric(density_trend[,2]), as.numeric(density_trend[,4]), col=adjustcolor("cornflowerblue", alpha=0.8),  xlab="year", ylab="Density", ylim=c(-2,2), xlim=c(4,21), type="n")
for(g in levels(as.factor(density_trend[,5]))){
subbed <- subset(density_trend, cell_ID == g)
ordered_subbed <- subbed[order(subbed$x_values), ]
lines(rev(as.numeric(ordered_subbed[,2])), as.numeric(ordered_subbed[,4]), lwd=.3, col=adjustcolor("limegreen", 0.3))
}
density_trend <- all_vectors[which(all_vectors[,1] == location_name),]
ordered_density_trend <- density_trend[order(density_trend$x_values), ]
#gammer <- loess(as.numeric(ordered_density_trend[,4]) ~ as.numeric(ordered_density_trend[,2]), span = 1)
gammer <- gam(as.numeric(ordered_density_trend[,4]) ~ s(as.numeric(ordered_density_trend[,2]), df = 3))
summary(gammer)
predict_gam <- predict(gammer, se=TRUE)
abline(h=0, lty=2, col="grey")
#lines(rev(ordered_density_trend[,2]) ,  predict_gam$fit + predict_gam$se.fit,  col="orange", lty=1, lwd=1)
#lines(rev(ordered_density_trend[,2]) ,  predict_gam$fit - predict_gam$se.fit,  col="orange", lty=1, lwd=1)
polygon(x=c(rev(ordered_density_trend[,2]), ordered_density_trend[,2] ), y=c(predict_gam$fit, rev(predict_gam$fit)), col=adjustcolor("firebrick", alpha=.5),bty="n", lwd=.2)
lines(rev(ordered_density_trend[,2]) ,predict_gam$fit,  col="firebrick", lwd=1)
}
if(type == 3){
#h <- 3
density_trend <- all_vectors[which(all_vectors[,1] == location_name ),]
#plot(as.numeric(density_trend[,2]), as.numeric(density_trend[,4]), col=adjustcolor("cornflowerblue", alpha=0.8),  xlab="year", ylab="Density", ylim=c(-2,2), xlim=c(4,21), type="n")
for(g in levels(as.factor(density_trend[,5]))){
subbed <- subset(density_trend, cell_ID == g)
ordered_subbed <- subbed[order(subbed$x_values), ]
lines(rev(as.numeric(ordered_subbed[,2])), as.numeric(ordered_subbed[,4]), lwd=.3, col=adjustcolor("limegreen", 0.3))
}
density_trend <- all_vectors[which(all_vectors[,1] == location_name),]
ordered_density_trend <- density_trend[order(density_trend$x_values), ]
gammer <- loess(as.numeric(ordered_density_trend[,4]) ~ as.numeric(ordered_density_trend[,2]), span = 1)
summary(gammer)
predict_gam <- predict(gammer, se=TRUE)
abline(h=0, lty=2, col="grey")
#lines(rev(ordered_density_trend[,2]) ,  predict_gam$fit + predict_gam$se.fit,  col="orange", lty=1, lwd=1)
#lines(rev(ordered_density_trend[,2]) ,  predict_gam$fit - predict_gam$se.fit,  col="orange", lty=1, lwd=1)
polygon(x=c(rev(ordered_density_trend[,2]), ordered_density_trend[,2] ), y=c(predict_gam$fit, rev(predict_gam$fit)), col=adjustcolor("firebrick", alpha=.5),bty="n", lwd=.2)
lines(rev(ordered_density_trend[,2]) ,predict_gam$fit,  col="firebrick", lwd=1)
}
#means_long_y <- c(1,1,1,1,1, meanss)
#means_long_x <- c(0:4, 4:21)
#	break_one <- break_one_2
#	break_two <- break_two_2
#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)
#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)
#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)
#abline(v= break_one, col="white")
#abline(v= break_two, col="white")
#	break_one <- break_one_1
#	break_two <- break_two_1
#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)
#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)
#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)
#abline(v= break_one, col="white")
#abline(v= break_two, col="white")
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white")
#lines(4:21, meanss)
#lines(21:4, meanss)
}
install.packages("wallas")
install.packages("wallace")
setwd("~/Desktop/Botero postdoc 2016/Human density and the origins of agriculture")#
#
library(rgdal)#
# Normal#
continent <- readShapePoly('Origins_updated.shp')#
# Equal area#
proj4string(omoI) <- proj4string(continent) <- CRS("+proj=longlat +datum=WGS84")#
proj <- CRS("+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs")#
proj <- CRS("+init=epsg:4326")#
+init=epsg:9834#
continent.ea <- spTransform(continent, proj)#
## need to reproject here to: equidistant cylindrical equatorial projection, also referred to as equirectangular projection#
#png(file=paste("xray.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0), oma = c(0,0,0,0),  xaxs='i', yaxs='i')#
#
plot(continent.ea)
remove.packages("rgdal")
install.packages("rgdal")
setwd("~/Desktop/Botero postdoc 2016/Human density and the origins of agriculture")#
#remove.packages("rgdal")#
#install.packages("rgdal")#
#
library(rgdal)#
# Normal#
continent <- readShapePoly('Origins_updated.shp')#
# Equal area#
proj4string(omoI) <- proj4string(continent) <- CRS("+proj=longlat +datum=WGS84")#
proj <- CRS("+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs")#
proj <- CRS("+init=epsg:4326")#
+init=epsg:9834#
continent.ea <- spTransform(continent, proj)#
## need to reproject here to: equidistant cylindrical equatorial projection, also referred to as equirectangular projection#
#png(file=paste("xray.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0), oma = c(0,0,0,0),  xaxs='i', yaxs='i')#
#
plot(continent.ea)
setwd("~/Desktop/Botero postdoc 2016/Human density and the origins of agriculture")#
#remove.packages("rgdal")#
#install.packages("rgdal")#
#
library(rgdal)#
# Normal#
continent <- readShapePoly('Origins_updated.shp')#
# Equal area#
proj4string(omoI) <- proj4string(continent) <- CRS("+proj=longlat +datum=WGS84")#
proj <- CRS("+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs")#
proj <- CRS("+init=epsg:4326")#
continent.ea <- spTransform(continent, proj)#
## need to reproject here to: equidistant cylindrical equatorial projection, also referred to as equirectangular projection#
#png(file=paste("xray.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0), oma = c(0,0,0,0),  xaxs='i', yaxs='i')#
#
plot(continent.ea)
setwd("~/Desktop/Botero postdoc 2016/Human density and the origins of agriculture")#
#remove.packages("rgdal")#
#install.packages("rgdal")#
library(maptools)#
library(rgdal)#
# Normal#
continent <- readShapePoly('Origins_updated.shp')#
# Equal area#
proj4string(omoI) <- proj4string(continent) <- CRS("+proj=longlat +datum=WGS84")#
proj <- CRS("+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs")#
proj <- CRS("+init=epsg:4326")#
continent.ea <- spTransform(continent, proj)#
## need to reproject here to: equidistant cylindrical equatorial projection, also referred to as equirectangular projection#
#png(file=paste("xray.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0), oma = c(0,0,0,0),  xaxs='i', yaxs='i')#
#
plot(continent.ea)
