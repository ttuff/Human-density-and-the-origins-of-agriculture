domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]
domestication_times
rownames(domestication_times)[9]
colnames(domestication_times)[9]
colnames(domestication_times)[9] <- "adopt exploitation date"
domestication_times
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(0,1))#
#
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[2]), 7]#
#hist(match)#
j <- ecdf(12-match)#
print(j)#
plot(quantile(j, probs=seq(0,1, by=0.25)))#
lines(12:1, j(1:12), type="l")#
#abline(v=12)#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), -c( j(maxer:0), 0, 0), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#
	liner_1 <- maxer-seq(0, maxer, length.out=100)[which(summary(j(seq(1, maxer, length.out=100)))[2] >= format(j(seq(1, maxer, length.out=100)), digits=4))]#
	#abline(v= min(liner), col="limegreen")#
	#abline(v= max(liner), col="limegreen")#
	break_one <- max(liner_1)#
			break_two <- min(liner_1)#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == 			levels(domestication_times$Region)[ type_number]), 7]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), c(2 + j(maxer:0), 2, 2), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#
	liner_2 <- maxer-seq(0, maxer, length.out=100)[which(summary(j(seq(1, maxer, length.out=100)))[2] >= format(j(seq(1, maxer, length.out=100)), digits=4))]#
	#abline(v= min(liner), col="limegreen")#
	#abline(v= max(liner), col="limegreen")#
	break_one <- max(liner_2)#
			break_two <- min(liner_2)#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		lines(x=c(break_two, break_two), y=c(2,3), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- max(liner_2)#
			break_two <- min(liner_2)#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- max(liner_1)#
			break_two <- min(liner_1)#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
domestication_times
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,3])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"
save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")
domestication_times
domestication_times[,7]
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"
domestication_times
save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(0,1))#
#
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[2]), 7]#
#hist(match)#
j <- ecdf(12-match)#
print(j)#
plot(quantile(j, probs=seq(0,1, by=0.25)))#
lines(12:1, j(1:12), type="l")#
#abline(v=12)#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), -c( j(maxer:0), 0, 0), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#
	liner_1 <- maxer-seq(0, maxer, length.out=100)[which(summary(j(seq(1, maxer, length.out=100)))[2] >= format(j(seq(1, maxer, length.out=100)), digits=4))]#
	#abline(v= min(liner), col="limegreen")#
	#abline(v= max(liner), col="limegreen")#
	break_one <- max(liner_1)#
			break_two <- min(liner_1)#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == 			levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), c(2 + j(maxer:0), 2, 2), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#
	liner_2 <- maxer-seq(0, maxer, length.out=100)[which(summary(j(seq(1, maxer, length.out=100)))[2] >= format(j(seq(1, maxer, length.out=100)), digits=4))]#
	#abline(v= min(liner), col="limegreen")#
	#abline(v= max(liner), col="limegreen")#
	break_one <- max(liner_2)#
			break_two <- min(liner_2)#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		lines(x=c(break_two, break_two), y=c(2,3), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- max(liner_2)#
			break_two <- min(liner_2)#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- max(liner_1)#
			break_two <- min(liner_1)#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
domestication_times
type_number <- 1
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]
match
levels(domestication_times$Region)
type_number <- 8
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]
match
maxer <- max(match, na.rm=TRUE)
maxer-match
j <- ecdf(maxer-match)#
	print(j)
plot(0,0, xlim=c(15,0), ylim=c(0,1))#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), -c( j(maxer:0), 0, 0), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#
	liner_1 <- maxer-seq(0, maxer, length.out=100)[which(summary(j(seq(1, maxer, length.out=100)))[2] >= format(j(seq(1, maxer, length.out=100)), digits=4))]#
	#abline(v= min(liner), col="limegreen")#
	#abline(v= max(liner), col="limegreen")#
	break_one <- max(liner_1)#
			break_two <- min(liner_1)#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")
print(j)
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), -c( j(maxer:0), 0, 0), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#
	liner_1 <- maxer-seq(0, maxer, length.out=100)[which(summary(j(seq(1, maxer, length.out=100)))[2] >= format(j(seq(1, maxer, length.out=100)), digits=4))]#
	#abline(v= min(liner), col="limegreen")#
	#abline(v= max(liner), col="limegreen")#
	break_one <- max(liner_1)#
			break_two <- min(liner_1)#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")
liner_1
plot(liner_1)
liner_1
seq(0, maxer, length.out=100)
plot(seq(0, maxer, length.out=100), liner_1)
seq(0, maxer, length.out=100)
length(liner)
length(liner_1)
plot(seq(0, maxer, length.out=63), liner_1)
dev.off()
plot(seq(0, maxer, length.out=63), liner_1)
seq(0, maxer, length.out=63)
liner_1
plot(seq(0, maxer, length.out=63), liner_1)
plot(seq(0, maxer, length.out=63), j)
print(j)
j(maxer:0)
maxer
format(j(seq(1, maxer, length.out=100)), digits=4))]
format(j(seq(1, maxer, length.out=100)), digits=4))
format(j(seq(1, maxer, length.out=100)), digits=4)
maxer-seq(0, maxer, length.out=100)[which(summary(j(seq(1, maxer, length.out=100)))[2]
which(summary(j(seq(1, maxer, length.out=100)))[2] >= format(j(seq(1, maxer, length.out=100)), digits=4))
j(seq(1, maxer, length.out=100))
plot(j(seq(1, maxer, length.out=100)))
plot(j(seq(1, maxer, length.out=100)), type="l")
plot(j(seq(1, maxer, length.out=100)), type="l", ylim=c(0,1))
plot(j(seq(0, maxer, length.out=100)), type="l", ylim=c(0,1))
plot(j(seq(-1, maxer, length.out=100)), type="l", ylim=c(0,1))
j(seq(-1, maxer, length.out=100)), type="l", ylim=c(0,1)
j(seq(-1, maxer, length.out=100))
j(seq(0, maxer, length.out=100))
plot(j(seq(0, maxer, length.out=100)), type="l", ylim=c(0,1))
plot(j(seq(-1, maxer, length.out=100)), type="l", ylim=c(0,1))
type_number <- 1#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), -c( j(maxer:0), 0, 0), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#
plot(j(seq(-1, maxer, length.out=100)), type="l", ylim=c(0,1))
x_seq <- seq(-1, maxer, length.out=100)#
y_seq <- j(seq(-1, maxer, length.out=100))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
x_seq <- rev(seq(-1, maxer, length.out=100))#
y_seq <- j(seq(-1, maxer, length.out=100))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), -c( j(maxer:0), 0, 0), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#
x_seq <- rev(seq(-1, maxer, length.out=100))#
y_seq <- j(seq(-1, maxer, length.out=100))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), -c( j(maxer:0), 0, 0), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#
x_seq <- rev(seq(-1, maxer, length.out=100))#
y_seq <- j(seq(-1, maxer, length.out=100))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
maxer
levels(domestication_times$Region)
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]
match
domestication_times
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), -c( j(maxer:0), 0, 0), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#
x_seq <- rev(seq(-1, maxer, length.out=100))#
y_seq <- j(seq(-1, maxer, length.out=100))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
match
maxer <- max(match, na.rm=TRUE)
maxer
j <- ecdf(maxer-match)#
	print(j)#
	polygon(c(0: maxer, maxer, 0), -c( j(maxer:0), 0, 0), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#
x_seq <- rev(seq(-1, maxer, length.out=100))#
y_seq <- j(seq(-1, maxer, length.out=100))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
y_seq
print(j)
j(seq(-1, maxer, length.out=100))
y_seq
seq(-1, maxer, length.out=100)
x_seq <- seq(-1, maxer, length.out=100)#
y_seq <- j(seq(-1, maxer, length.out=100))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
x_seq <- rev(seq(-1, maxer, length.out=100))#
y_seq <- j(seq(-1, maxer, length.out=100))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
x_seq
x_seq <- rev(seq(0, maxer, length.out=100))#
y_seq <- j(seq(0, maxer, length.out=100))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
x_seq <- c(rev(seq(0, maxer, length.out=100)), maxer+1)#
y_seq <- j(seq(0, maxer, length.out=100), 0)#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
y_seq <- c(j(seq(0, maxer, length.out=100)), 0)
x_seq <- c(rev(seq(0, maxer, length.out=100)), maxer+1)#
y_seq <- c(j(seq(0, maxer, length.out=100)), 0)#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
x_seq
y_seq
x_seq <- rev(c(seq(0, maxer, length.out=100)), maxer+1)
x_seq <- rev(c(seq(0, maxer, length.out=100), maxer+1))
x_seq
y_seq
x_seq <- rev(c(seq(0, maxer, length.out=100), maxer+1))#
y_seq <- c(j(seq(0, maxer, length.out=100)), 0)#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
x_seq <- rev(c(seq(0, maxer, length.out=100), -1))#
y_seq <- c(j(seq(0, maxer, length.out=100)), 0)#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
x_seq
x_seq <- rev(c(-1,seq(0, maxer, length.out=100)))#
y_seq <- c(j(seq(0, maxer, length.out=100)), 0)#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
x_seq
y_seq
x_seq <- rev(c(-1,seq(0, maxer, length.out=100)))#
y_seq <- c(0, j(seq(0, maxer, length.out=100)))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))
plot(x_seq, y_seq, type="l", ylim=c(0,1))#
polygon(x_seq, y_seq, border="black", col=adjustcolor("cornflowerblue", alpha=0.5))
plot(x_seq, y_seq, type="l", ylim=c(0,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))
plot(x_seq, y_seq, type="l", ylim=c(0,1))#
polygon(c(-1, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- c(0, j(seq(0, maxer, length.out=100)))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))
summary(y_seq)
y_seq
quantile(y_seq)
quantile(y_seq)[2]
quantile(j)[2]
quantile(j)
type_number <- 1#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- c(0, j(seq(0, maxer, length.out=100)))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
quantile(j)[2]
plot(x_seq, y_seq, type="l", ylim=c(0,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- c(0, j(seq(0, maxer, length.out=100)))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- c(0, j(seq(0, maxer, length.out=100)))#
#
plot(x_seq, y_seq, type="l", ylim=c(0,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
plot(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
plot(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
plot(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
plot(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- max(liner_2)#
			break_two <- min(liner_2)#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- max(liner_1)#
			break_two <- min(liner_1)#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- max(liner_2)#
			break_two <- min(liner_2)#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- max(liner_1)#
			break_two <- min(liner_1)#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
2+c(0, j(seq(0, maxer, length.out=100)))
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(2, x_seq), c(2, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
break_two
break_one
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
				polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
				polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
				polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
type_number <- 8
c(break_two, break_two, break_one, break_one)
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
type_number <- 1
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]
plot(0,0, xlim=c(15,0), ylim=c(-1,1))
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]
break_one_1
break_two_1
polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)
c(break_two, break_two, break_one, break_one)
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 1#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two_1, break_two_1), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(0, 1, 1, 0), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two_2, break_two_2), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 1#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two_1, break_two_1), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two_2, break_two_2), y=c(0,-1), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 1#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two_1, break_two_1), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two_2, break_two_2), y=c(1,2), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 1#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two_1, break_two_1), y=c(0,-1), col="white")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two_2, break_two_2), y=c(2,3), col="white")#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 1#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two_1, break_two_1), y=c(0,-1), col="white")#
if(break_one_1 == break_one_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two_2, break_two_2), y=c(2,3), col="white")#
if(break_one_2 == break_one_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
type_number <- 8
match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))
break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]
break_one_1 == break_two_1
lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5)
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two_1, break_two_1), y=c(0,-1), col="white")#
if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5))}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two_2, break_two_2), y=c(2,3), col="white")#
if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5))}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two_1, break_two_1), y=c(0,-1), col="white")#
if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
			lines(x=c(break_two_2, break_two_2), y=c(2,3), col="white")#
if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_two_2, break_two_2), y=c(2,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(0,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(1, 3.1, 3.1, 1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
		#		polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, 1, 1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,8.2), y=c(-1,3), col="grey50")					#
	polygon(x=c(8.2,4), y=c(-1,3), col="grey80")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col="grey50")					#
	polygon(x=c(8.2.2,4,4), y=c(-1,3,3,-1), col="grey80")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col="red")					#
	polygon(x=c(8.2.2,4,4), y=c(-1,3,3,-1), col="blue")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col="red")					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col="blue")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col="grey40")					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col="grey80")#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5))					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.3))#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5))					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.1))#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
				polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5))					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.1))#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.1), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] + 5, means[[i]] + 5 + abs(sds[[i]]), means[[i]] + 5 - abs(sds[[i]]))#
	scaled <- scale(x - 5, center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.1), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.1), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.1), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1	#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.1), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 2#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
setwd("~/Desktop/Human density and the origins of agriculture")
setwd("~/Desktop/Human density and the origins of agriculture")#
#
# Get the predctions from Population_trend script#
load("prediction.RData")#
# Read the polygons#
origins <- readShapePoly('origins4.shp')#
#
# Extract data#
#
cells <- do.call(rbind, sapply(per.origin, subset, select = 1))#
cells#
g.means <- apply(prediction[-cells, ], 2, mean, na.rm = TRUE) #
g.gams <- apply(prediction[-cells, ], 2, sd, na.rm = TRUE)#
g.means2 <- apply(prediction[cells, ], 2, mean, na.rm = TRUE) #
g.gams2 <- apply(prediction[cells, ], 2, sd, na.rm = TRUE)#
#
pdf("Global_pop_trend_comparisson.pdf", width = 25, height = 20)#
par(mar = c(5, 7, 7, 5))#
plot(seq(0, 1, length.out = length(time)) ~ time, col = "white", main = "GLOBAL",#
     xlim = c(21, 4), ylab = "Population Density (standardized)", #
     xlab = "Thousand of years ago", cex.lab = 3, cex.main = 4, cex.axis = 2)#
down <- g.means - g.gams#
up <- g.means + g.gams#
lines(y = down, x = time, lty = 3, col = "gray40", lwd = 3)#
lines(y = up, x = time, lty = 3, col = "gray40", lwd = 3)#
lines(y = g.means, x = time, lwd = 4)#
#
lines(y = g.means2, x = time, lwd = 3, col = "red")#
down2 <- g.means2 - g.gams2#
up2 <- g.means2 + g.gams2#
lines(y = down2, x = time, lty = 3, col = "red", lwd = 3)#
lines(y = up2, x = time, lty = 3, col = "red", lwd = 3)#
polygon(cbind(c(12, 8.2, 8.2, 12, 12), c(-1, -1, 2, 2, -1)),#
        col = rgb(0, 1, 0, alpha = .2), border = F)#
polygon(cbind(c(8.2, 4.2, 4.2, 8.2, 8.2), c(-1, -1, 2, 2, -1)),#
        col = rgb(.28, 0, .28, alpha = .2), border = F)#
dev.off()#
# Betas#
# beta1[beta1 == 0] <- NA#
# beta2[beta2 == 0] <- NA#
# beta3[beta3 == 0] <- NA#
betas <- list(beta1, beta2, beta3)#
beta1 <- -beta1#
beta2 <- -beta2#
beta3 <- -beta3#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
cells1 <- do.call(rbind, sapply(per.origin[origin.time.region == 1]#
, subset, select = 1))#
cells2 <- do.call(rbind, sapply(per.origin[origin.time.region == 2]#
                                , subset, select = 1))#
#
pdf("Global_pop_beta_comparisson.pdf", width = 20, height = 30)#
par(mfrow = c(3, 1), mar = c(7, 7, 5, 5))#
hist(na.omit(beta1[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Early Holocene (12-8k)", xlim = c(-.5, .5), cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta1[cells1]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
legend(x = -0.4, y = 5, c("Non-origins", "Origins"), #
       fill = c(rgb(0, 1, 0, alpha = 1), rgb(0, 0, 1, alpha = .4)),#
       cex = 4)#
#
hist(na.omit(beta2[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Middle Holocene (8-4k)", xlim = c(-.5, .5), cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta2[cells2]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
hist(na.omit(beta3[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Early-Middle Holocene (12-4k)", xlim = c(-.5, .5),cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta3[cells]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
dev.off()
setwd("~/Desktop/Human density and the origins of agriculture")#
#
# Get the predctions from Population_trend script#
load("prediction.RData")#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
#
cells <- do.call(rbind, sapply(per.origin, subset, select = 1))#
cells#
g.means <- apply(prediction[-cells, ], 2, mean, na.rm = TRUE) #
g.gams <- apply(prediction[-cells, ], 2, sd, na.rm = TRUE)#
g.means2 <- apply(prediction[cells, ], 2, mean, na.rm = TRUE) #
g.gams2 <- apply(prediction[cells, ], 2, sd, na.rm = TRUE)#
#
pdf("Global_pop_trend_comparisson.pdf", width = 25, height = 20)#
par(mar = c(5, 7, 7, 5))#
plot(seq(0, 1, length.out = length(time)) ~ time, col = "white", main = "GLOBAL",#
     xlim = c(21, 4), ylab = "Population Density (standardized)", #
     xlab = "Thousand of years ago", cex.lab = 3, cex.main = 4, cex.axis = 2)#
down <- g.means - g.gams#
up <- g.means + g.gams#
lines(y = down, x = time, lty = 3, col = "gray40", lwd = 3)#
lines(y = up, x = time, lty = 3, col = "gray40", lwd = 3)#
lines(y = g.means, x = time, lwd = 4)#
#
lines(y = g.means2, x = time, lwd = 3, col = "red")#
down2 <- g.means2 - g.gams2#
up2 <- g.means2 + g.gams2#
lines(y = down2, x = time, lty = 3, col = "red", lwd = 3)#
lines(y = up2, x = time, lty = 3, col = "red", lwd = 3)#
polygon(cbind(c(12, 8.2, 8.2, 12, 12), c(-1, -1, 2, 2, -1)),#
        col = rgb(0, 1, 0, alpha = .2), border = F)#
polygon(cbind(c(8.2, 4.2, 4.2, 8.2, 8.2), c(-1, -1, 2, 2, -1)),#
        col = rgb(.28, 0, .28, alpha = .2), border = F)#
dev.off()#
# Betas#
# beta1[beta1 == 0] <- NA#
# beta2[beta2 == 0] <- NA#
# beta3[beta3 == 0] <- NA#
betas <- list(beta1, beta2, beta3)#
beta1 <- -beta1#
beta2 <- -beta2#
beta3 <- -beta3#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
cells1 <- do.call(rbind, sapply(per.origin[origin.time.region == 1]#
, subset, select = 1))#
cells2 <- do.call(rbind, sapply(per.origin[origin.time.region == 2]#
                                , subset, select = 1))#
#
pdf("Global_pop_beta_comparisson.pdf", width = 20, height = 30)#
par(mfrow = c(3, 1), mar = c(7, 7, 5, 5))#
hist(na.omit(beta1[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Early Holocene (12-8k)", xlim = c(-.5, .5), cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta1[cells1]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
legend(x = -0.4, y = 5, c("Non-origins", "Origins"), #
       fill = c(rgb(0, 1, 0, alpha = 1), rgb(0, 0, 1, alpha = .4)),#
       cex = 4)#
#
hist(na.omit(beta2[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Middle Holocene (8-4k)", xlim = c(-.5, .5), cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta2[cells2]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
hist(na.omit(beta3[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Early-Middle Holocene (12-4k)", xlim = c(-.5, .5),cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta3[cells]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
dev.off()
objects
objects()
load("prediction.RData")
objects()
prediction
setwd("~/Desktop/Human density and the origins of agriculture")#
#
# Get the predctions from Population_trend script#
load("prediction.RData")#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')
cells <- do.call(rbind, sapply(origins, subset, select = 1))#
cells#
g.means <- apply(prediction[-cells, ], 2, mean, na.rm = TRUE) #
g.gams <- apply(prediction[-cells, ], 2, sd, na.rm = TRUE)#
g.means2 <- apply(prediction[cells, ], 2, mean, na.rm = TRUE) #
g.gams2 <- apply(prediction[cells, ], 2, sd, na.rm = TRUE)
# Library#
library(maptools)#
library(raster)#
setwd("~/Desktop/Human density and the origins of agriculture")#
# Load patricks productivity PCA data#
load('Productivity_ALL.RDATA')#
# Load origin shapefiles#
origins <- readShapePoly('Origins_updated.shp')#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
# Extract the data#
prod.origin <- extract(Productivity.ALL, origins)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, sd, na.rm = TRUE)#
names(means) <- origins@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
# Plot#
pdf("productivity.pdf", 20, 30) #
par(mfrow = c(7, 4), mar = c(5, 7, 5, 1))#
for (i in 1:length(means)) {#
  plot(y = means[[i]], x = time, xlim = c(21, 4), ylim = c(ymin, ymax),#
       main = names(means)[i], cex.main = 4, cex.lab = 3, cex.axis = 2,#
       ylab = "Productivity (PCA axis)", xlab = "Thousand of years ago (k)",#
       pch = 20, lwd = 1, type = "l", #
       col = c("purple", "green")[origin.time.region[i]])#
  up <- sds[[i]] + means[[i]]#
  down <-  means[[i]] - sds[[i]]#
  lines(up ~ time, lty = 2)#
  lines(down ~ time, lty = 2)#
}#
dev.off()
# Library#
library(raster)#
library(maptools)#
library(gam)#
# Load data#
load("PopD_all_December.rdata")
# Library#
library(raster)#
library(maptools)#
library(gam)#
# Load data#
load("PopD_all_December.rdata")#
#
# Extract data to a matrix#
Pop <- values(PopD.ALL)#
r <- raster(PopD.ALL, 1)#
#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
per.origin <- extract(r, origins, cellnumber = TRUE, buffer = 100000)#
names(per.origin) <- origins@data[, 1]#
#
# Function standardization#
std <- function(x) {#
  b <- (x - min(x)) / (max(x) - min(x))#
  return(rev(b))#
}#
#
# Calculating mean and #
global.means <- global.gams <- list()#
#
for (j in 1:length(per.origin)) {#
  print(j)#
  originI <- Pop[per.origin[[j]][, 1], ]#
  time <- 21:4#
  originI <- na.exclude(originI)#
  b <- apply(originI, 1, std)#
  nJ <- nrow(originI)#
  predictions <- matrix(nrow = nJ, ncol = length(time))#
  for(i in 1:nJ) {#
    model <- gam(b[, i] ~ s(time, df = 3))#
    col <- sample(rainbow(100), 1)#
    predictions[i, ] <- predict(model)#
  }#
  global.means[[j]] <- apply(predictions, 2, mean) #
  global.gams[[j]] <- apply(predictions, 2, sd)#
}#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
# Plot per region#
tiff("all_origins_pop_trend.tif", width = 50, height = 40, res = 300,#
     units = 'cm')#
par(mfrow = c(4, 5))#
for (j in 1:length(global.means)) {#
plot(seq(0, 1, length.out = length(time)) ~ time, col = "white", main = names(per.origin)[j],#
     xlim = c(21, 4), ylab = "Pop Density", #
     xlab = "Thousand of years ago")#
  x <- global.means[[j]]#
  y <- global.gams[[j]]#
  down <- x - y#
  up <- x + y#
  lines(y = down, x = time, lty = 3, col = "gray40", lwd = 1)#
  lines(y = up, x = time, lty = 3, col = "gray40", lwd = 1)#
  lines(y = x, x = time, lwd = 2)#
  if (origin.time.region[j] == 1) {#
    polygon(cbind(c(12, 8.2, 8.2, 12, 12), c(-1, -1, 2, 2, -1)),#
            col = rgb(0, 1, 0, alpha = .2), border = F)#
  }#
  if (origin.time.region[j] == 2) {#
    polygon(cbind(c(8.2, 4.2, 4.2, 8.2, 8.2), c(-1, -1, 2, 2, -1)),#
            col = rgb(.28, 0, .28, alpha = .2), border = F)#
  }#
}#
dev.off()#
# Save it in pdf#
pdf("all_origins_pop_trend.pdf", width = 40, height = 50)#
par(mfrow = c(5, 4), mar =  c(5, 7, 7, 5))#
for (j in 1:length(global.means)) {#
  plot(seq(0, 1, length.out = length(time)) ~ time, col = "white", main = names(per.origin)[j],#
       xlim = c(21, 4), ylab = "Pop Density", #
       xlab = "Thousand of years ago", cex.lab = 3, cex.main = 4, cex.axis = 2)#
  x <- global.means[[j]]#
  y <- global.gams[[j]]#
  down <- x - y#
  up <- x + y#
  lines(y = down, x = time, lty = 3, col = "gray40", lwd = 3)#
  lines(y = up, x = time, lty = 3, col = "gray40", lwd = 3)#
  lines(y = x, x = time, lwd = 4)#
  if (origin.time.region[j] == 1) {#
    polygon(cbind(c(12, 8.2, 8.2, 12, 12), c(-1, -1, 2, 2, -1)),#
            col = rgb(0, 1, 0, alpha = .2), border = F)#
  }#
  if (origin.time.region[j] == 2) {#
    polygon(cbind(c(8.2, 4.2, 4.2, 8.2, 8.2), c(-1, -1, 2, 2, -1)),#
            col = rgb(.28, 0, .28, alpha = .2), border = F)#
  }#
}#
dev.off()
# Library#
library(raster)#
library(maptools)#
library(gam)#
# Load data#
load("PopD_all_December.rdata")#
#
# Extract data to a matrix#
Pop <- values(PopD.ALL)#
r <- raster(PopD.ALL, 1)#
#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
per.origin <- extract(r, origins, cellnumber = TRUE, buffer = 100000)#
names(per.origin) <- origins@data[, 1]
cells <- do.call(rbind, sapply(per.origin, subset, select = 1))#
cells#
g.means <- apply(prediction[-cells, ], 2, mean, na.rm = TRUE) #
g.gams <- apply(prediction[-cells, ], 2, sd, na.rm = TRUE)#
g.means2 <- apply(prediction[cells, ], 2, mean, na.rm = TRUE) #
g.gams2 <- apply(prediction[cells, ], 2, sd, na.rm = TRUE)
pdf("Global_pop_trend_comparisson.pdf", width = 25, height = 20)#
par(mar = c(5, 7, 7, 5))#
plot(seq(0, 1, length.out = length(time)) ~ time, col = "white", main = "GLOBAL",#
     xlim = c(21, 4), ylab = "Population Density (standardized)", #
     xlab = "Thousand of years ago", cex.lab = 3, cex.main = 4, cex.axis = 2)#
down <- g.means - g.gams#
up <- g.means + g.gams#
lines(y = down, x = time, lty = 3, col = "gray40", lwd = 3)#
lines(y = up, x = time, lty = 3, col = "gray40", lwd = 3)#
lines(y = g.means, x = time, lwd = 4)#
#
lines(y = g.means2, x = time, lwd = 3, col = "red")#
down2 <- g.means2 - g.gams2#
up2 <- g.means2 + g.gams2#
lines(y = down2, x = time, lty = 3, col = "red", lwd = 3)#
lines(y = up2, x = time, lty = 3, col = "red", lwd = 3)#
polygon(cbind(c(12, 8.2, 8.2, 12, 12), c(-1, -1, 2, 2, -1)),#
        col = rgb(0, 1, 0, alpha = .2), border = F)#
polygon(cbind(c(8.2, 4.2, 4.2, 8.2, 8.2), c(-1, -1, 2, 2, -1)),#
        col = rgb(.28, 0, .28, alpha = .2), border = F)#
dev.off()#
# Betas#
# beta1[beta1 == 0] <- NA#
# beta2[beta2 == 0] <- NA#
# beta3[beta3 == 0] <- NA#
betas <- list(beta1, beta2, beta3)#
beta1 <- -beta1#
beta2 <- -beta2#
beta3 <- -beta3#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
cells1 <- do.call(rbind, sapply(per.origin[origin.time.region == 1]#
, subset, select = 1))#
cells2 <- do.call(rbind, sapply(per.origin[origin.time.region == 2]#
                                , subset, select = 1))#
#
pdf("Global_pop_beta_comparisson.pdf", width = 20, height = 30)#
par(mfrow = c(3, 1), mar = c(7, 7, 5, 5))#
hist(na.omit(beta1[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Early Holocene (12-8k)", xlim = c(-.5, .5), cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta1[cells1]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
legend(x = -0.4, y = 5, c("Non-origins", "Origins"), #
       fill = c(rgb(0, 1, 0, alpha = 1), rgb(0, 0, 1, alpha = .4)),#
       cex = 4)#
#
hist(na.omit(beta2[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Middle Holocene (8-4k)", xlim = c(-.5, .5), cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta2[cells2]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
hist(na.omit(beta3[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Early-Middle Holocene (12-4k)", xlim = c(-.5, .5),cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta3[cells]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
dev.off()
betas <- list(beta1, beta2, beta3)
# Function standardization#
std <- function(x) {#
  b <- (x - min(x)) / (max(x) - min(x))#
  return(rev(b))#
}#
#
# Calculating mean and #
global.means <- global.gams <- list()#
#
for (j in 1:length(per.origin)) {#
  print(j)#
  originI <- Pop[per.origin[[j]][, 1], ]#
  time <- 21:4#
  originI <- na.exclude(originI)#
  b <- apply(originI, 1, std)#
  nJ <- nrow(originI)#
  predictions <- matrix(nrow = nJ, ncol = length(time))#
  for(i in 1:nJ) {#
    model <- gam(b[, i] ~ s(time, df = 3))#
    col <- sample(rainbow(100), 1)#
    predictions[i, ] <- predict(model)#
  }#
  global.means[[j]] <- apply(predictions, 2, mean) #
  global.gams[[j]] <- apply(predictions, 2, sd)#
}
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.1), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 2#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
means
x
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.1), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.5), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.8), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("black", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- rev(global.means)#
sds <- rev(global.gams)#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
#means <- global.means#
#sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
#means <- global.means#
#sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	#polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_RAW_density_specific_time.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
#means <- global.means#
#sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	#polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	#polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	#polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_RAW_density_general_time.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
#means <- global.means#
#sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	#polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM_density_general_time.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM_density_specific_time.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM_density_specific_time.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	#polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	#polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
#if(break_one_1 == break_two_1){lines(x=c(break_one_1 , break_one_1), y=c(0,1), col=adjustcolor("cornflowerblue", alpha=0.5), lwd=5)}#
#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq)#
polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
#if(break_one_2 == break_two_2){lines(x=c(break_one_2 , break_one_2), y=c(1,2), col=adjustcolor("limegreen", alpha=0.5), lwd=5)}#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
#	break_one_1 <- maxer#
#			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
# Library#
library(raster)#
library(maptools)#
library(gam)#
# Load data#
load("PopD_all_December.rdata")#
#
# Extract data to a matrix#
Pop <- values(PopD.ALL)#
r <- raster(PopD.ALL, 1)#
#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
per.origin <- extract(r, origins, cellnumber = TRUE, buffer = 100000)#
names(per.origin) <- origins@data[, 1]#
#
# Function standardization#
std <- function(x) {#
  b <- (x - min(x)) / (max(x) - min(x))#
  return(rev(b))#
}#
#
# Calculating mean and #
global.means <- global.gams <- list()#
#
for (j in 1:length(per.origin)) {#
  print(j)#
  originI <- Pop[per.origin[[j]][, 1], ]#
  time <- 21:4#
  originI <- na.exclude(originI)#
  b <- apply(originI, 1, std)#
  nJ <- nrow(originI)#
  predictions <- matrix(nrow = nJ, ncol = length(time))#
  for(i in 1:nJ) {#
    model <- gam(b[, i] ~ s(time, df = 3))#
    col <- sample(rainbow(100), 1)#
    predictions[i, ] <- predict(model)#
  }#
  global.means[[j]] <- apply(predictions, 2, mean) #
  global.gams[[j]] <- apply(predictions, 2, sd)#
}
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1, 3.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-1.25, 3), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-1.1, -1.5, -1.5, -1.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(3.1, 3.5, 3.5, 3.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,0), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("yellow", alpha=0.6), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("purple", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.6), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.3), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.8), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4,4), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.8), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.8), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.8), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
		axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
		}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	#if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(16,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.8), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.8), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.8), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.8), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential \n (ppl per km^2)", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.8), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.8), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
#means <- global.means#
#sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_RAW.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
#means <- global.means#
#sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	#polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
lines(4:21, meanss)#
#	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
# Library#
library(raster)#
library(maptools)#
library(gam)#
# Load data#
load("PopD_all_December.rdata")#
#
# Extract data to a matrix#
Pop <- values(PopD.ALL)#
r <- raster(PopD.ALL, 1)#
#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
per.origin <- extract(r, origins, cellnumber = TRUE, buffer = 100000)#
names(per.origin) <- origins@data[, 1]#
#
# Function standardization#
std <- function(x) {#
  b <- (x - min(x)) / (max(x) - min(x))#
  return(rev(b))#
}#
#
# Calculating mean and #
global.means <- global.gams <- list()#
#
for (j in 1:length(per.origin)) {#
  print(j)#
  originI <- Pop[per.origin[[j]][, 1], ]#
  time <- 21:4#
  originI <- na.exclude(originI)#
  b <- apply(originI, 1, std)#
  nJ <- nrow(originI)#
  predictions <- matrix(nrow = nJ, ncol = length(time))#
  for(i in 1:nJ) {#
    model <- gam(b[, i] ~ s(time, df = 6))#
    col <- sample(rainbow(100), 1)#
    predictions[i, ] <- predict(model)#
  }#
  global.means[[j]] <- apply(predictions, 2, mean) #
  global.gams[[j]] <- apply(predictions, 2, sd)#
}
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
# Library#
library(raster)#
library(maptools)#
library(gam)#
# Load data#
load("PopD_all_December.rdata")#
#
# Extract data to a matrix#
Pop <- values(PopD.ALL)#
r <- raster(PopD.ALL, 1)#
#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
per.origin <- extract(r, origins, cellnumber = TRUE, buffer = 100000)#
names(per.origin) <- origins@data[, 1]#
#
# Function standardization#
std <- function(x) {#
  b <- (x - min(x)) / (max(x) - min(x))#
  return(rev(b))#
}#
#
# Calculating mean and #
global.means <- global.gams <- list()#
#
for (j in 1:length(per.origin)) {#
  print(j)#
  originI <- Pop[per.origin[[j]][, 1], ]#
  time <- 21:4#
  originI <- na.exclude(originI)#
  b <- apply(originI, 1, std)#
  nJ <- nrow(originI)#
  predictions <- matrix(nrow = nJ, ncol = length(time))#
  for(i in 1:nJ) {#
    model <- gam(b[, i] ~ s(time, df = 3))#
    col <- sample(rainbow(100), 1)#
    predictions[i, ] <- predict(model)#
  }#
  global.means[[j]] <- apply(predictions, 2, mean) #
  global.gams[[j]] <- apply(predictions, 2, sd)#
}
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
# Library#
library(raster)#
library(maptools)#
library(gam)#
# Load data#
load("PopD_all_December.rdata")#
#
# Extract data to a matrix#
Pop <- values(PopD.ALL)#
r <- raster(PopD.ALL, 1)#
#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
per.origin <- extract(r, origins, cellnumber = TRUE, buffer = 100000)#
names(per.origin) <- origins@data[, 1]#
#
# Function standardization#
std <- function(x) {#
  b <- (x - min(x)) / (max(x) - min(x))#
  return(rev(b))#
}#
#
# Calculating mean and #
global.means <- global.gams <- list()#
#
for (j in 1:length(per.origin)) {#
  print(j)#
  originI <- Pop[per.origin[[j]][, 1], ]#
  time <- 21:4#
  originI <- na.exclude(originI)#
  b <- apply(originI, 1, std)#
  nJ <- nrow(originI)#
  predictions <- matrix(nrow = nJ, ncol = length(time))#
  for(i in 1:nJ) {#
    model <- gam(b[, i] ~ s(time, df = 1))#
    col <- sample(rainbow(100), 1)#
    predictions[i, ] <- predict(model)#
  }#
  global.means[[j]] <- apply(predictions, 2, mean) #
  global.gams[[j]] <- apply(predictions, 2, sd)#
}
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
# Library#
library(raster)#
library(maptools)#
library(gam)#
# Load data#
load("PopD_all_December.rdata")#
#
# Extract data to a matrix#
Pop <- values(PopD.ALL)#
r <- raster(PopD.ALL, 1)#
#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
per.origin <- extract(r, origins, cellnumber = TRUE, buffer = 100000)#
names(per.origin) <- origins@data[, 1]#
#
# Function standardization#
std <- function(x) {#
  b <- (x - min(x)) / (max(x) - min(x))#
  return(rev(b))#
}#
#
# Calculating mean and #
global.means <- global.gams <- list()#
#
for (j in 1:length(per.origin)) {#
  print(j)#
  originI <- Pop[per.origin[[j]][, 1], ]#
  time <- 21:4#
  originI <- na.exclude(originI)#
  b <- apply(originI, 1, std)#
  nJ <- nrow(originI)#
  predictions <- matrix(nrow = nJ, ncol = length(time))#
  for(i in 1:nJ) {#
    model <- gam(b[, i] ~ s(time, df = 15))#
    col <- sample(rainbow(100), 1)#
    predictions[i, ] <- predict(model)#
  }#
  global.means[[j]] <- apply(predictions, 2, mean) #
  global.gams[[j]] <- apply(predictions, 2, sd)#
}
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
dev.off()
# Library#
library(raster)#
library(maptools)#
library(gam)#
# Load data#
load("PopD_all_December.rdata")#
#
# Extract data to a matrix#
Pop <- values(PopD.ALL)#
r <- raster(PopD.ALL, 1)#
#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
per.origin <- extract(r, origins, cellnumber = TRUE, buffer = 100000)#
names(per.origin) <- origins@data[, 1]#
#
# Function standardization#
std <- function(x) {#
  b <- (x - min(x)) / (max(x) - min(x))#
  return(rev(b))#
}#
#
# Calculating mean and #
global.means <- global.gams <- list()#
#
for (j in 1:length(per.origin)) {#
  print(j)#
  originI <- Pop[per.origin[[j]][, 1], ]#
  time <- 21:4#
  originI <- na.exclude(originI)#
  b <- apply(originI, 1, std)#
  nJ <- nrow(originI)#
  predictions <- matrix(nrow = nJ, ncol = length(time))#
  for(i in 1:nJ) {#
    model <- gam(b[, i] ~ s(time, df = 15))#
    col <- sample(rainbow(100), 1)#
    predictions[i, ] <- predict(model)#
  }#
  global.means[[j]] <- apply(predictions, 2, mean) #
  global.gams[[j]] <- apply(predictions, 2, sd)#
}#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
# Plot per region#
tiff("all_origins_pop_trend.tif", width = 50, height = 40, res = 300,#
     units = 'cm')#
par(mfrow = c(4, 5))#
for (j in 1:length(global.means)) {#
plot(seq(0, 1, length.out = length(time)) ~ time, col = "white", main = names(per.origin)[j],#
     xlim = c(21, 4), ylab = "Pop Density", #
     xlab = "Thousand of years ago")#
  x <- global.means[[j]]#
  y <- global.gams[[j]]#
  down <- x - y#
  up <- x + y#
  lines(y = down, x = time, lty = 3, col = "gray40", lwd = 1)#
  lines(y = up, x = time, lty = 3, col = "gray40", lwd = 1)#
  lines(y = x, x = time, lwd = 2)#
  if (origin.time.region[j] == 1) {#
    polygon(cbind(c(12, 8.2, 8.2, 12, 12), c(-1, -1, 2, 2, -1)),#
            col = rgb(0, 1, 0, alpha = .2), border = F)#
  }#
  if (origin.time.region[j] == 2) {#
    polygon(cbind(c(8.2, 4.2, 4.2, 8.2, 8.2), c(-1, -1, 2, 2, -1)),#
            col = rgb(.28, 0, .28, alpha = .2), border = F)#
  }#
}#
dev.off()#
# Save it in pdf#
pdf("all_origins_pop_trend.pdf", width = 40, height = 50)#
par(mfrow = c(5, 4), mar =  c(5, 7, 7, 5))#
for (j in 1:length(global.means)) {#
  plot(seq(0, 1, length.out = length(time)) ~ time, col = "white", main = names(per.origin)[j],#
       xlim = c(21, 4), ylab = "Pop Density", #
       xlab = "Thousand of years ago", cex.lab = 3, cex.main = 4, cex.axis = 2)#
  x <- global.means[[j]]#
  y <- global.gams[[j]]#
  down <- x - y#
  up <- x + y#
  lines(y = down, x = time, lty = 3, col = "gray40", lwd = 3)#
  lines(y = up, x = time, lty = 3, col = "gray40", lwd = 3)#
  lines(y = x, x = time, lwd = 4)#
  if (origin.time.region[j] == 1) {#
    polygon(cbind(c(12, 8.2, 8.2, 12, 12), c(-1, -1, 2, 2, -1)),#
            col = rgb(0, 1, 0, alpha = .2), border = F)#
  }#
  if (origin.time.region[j] == 2) {#
    polygon(cbind(c(8.2, 4.2, 4.2, 8.2, 8.2), c(-1, -1, 2, 2, -1)),#
            col = rgb(.28, 0, .28, alpha = .2), border = F)#
  }#
}#
dev.off()
im.convert("~/Desktop/Botero postdoc 2016/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_RAW.pdf", output = "bm.png", extra.opts="-density 300")
install.packages("gm.convert")
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
~/Desktop/Botero postdoc 2016/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_RAW.pdf#
#
dev.copy(png,'myplot.png')#
dev.off()
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
~/Desktop/Botero postdoc 2016/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_RAW.pdf#
#
dev.copy(png,'myplot.png')#
dev.off()
saveToPDF <- function(...) {#
    d = dev.copy(pdf,...)#
    dev.off(d)#
}#
#
saveToPNG <- function(...) {#
    d = dev.copy(png,...)#
    dev.off(d)#
}#
#
## Try them out#
plot(rnorm(99),  col="red")#
saveToPDF("my.pdf", height=4,width=7)#
saveToPNG("my.png", height=600, width=400)
quartz(width=8, height=8)
quartz(width=8, height=8)#
#pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
saveToPDF <- function(...) {#
    d = dev.copy(pdf,...)#
    dev.off(d)#
}#
#
saveToPNG <- function(...) {#
    d = dev.copy(png,...)#
    dev.off(d)#
}#
#
## Try them out#
#
saveToPDF("my.pdf", height=4,width=7)#
saveToPNG("my.png", height=600, width=400)#
dev.off(d)
quartz(width=8, height=8)#
#pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
saveToPDF <- function(...) {#
    d = dev.copy(pdf,...)#
    dev.off(d)#
}#
#
saveToPNG <- function(...) {#
    d = dev.copy(png,...)#
    dev.off(d)#
}#
#
## Try them out#
#
saveToPDF("my.pdf", height=8,width=8)#
saveToPNG("my.png", height=8, width=8, units="in")#
dev.off()
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
quartz(width=8, height=8)#
#pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
saveToPDF <- function(...) {#
    d = dev.copy(pdf,...)#
    dev.off(d)#
}#
#
saveToPNG <- function(...) {#
    d = dev.copy(png,...)#
    dev.off(d)#
}#
#
## Try them out#
#
saveToPDF("my.pdf", height=8,width=8)#
saveToPNG("my.png", height=8, width=8, units="in", res=300)#
dev.off()
quartz(width=8, height = 8)#
#pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)
library(png)#
library(maptools)#
library(raster)#
#
## Figure 1 for a publication analyzing human density in relation to the origins of agriculture. #
setwd("~/Desktop/Human density and the origins of agriculture")#
#
domestication_times <- read.csv("~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.csv")#
#
dim(domestication_times)#
h <- which(is.na(domestication_times[,3]))#
domestication_times <- cbind(domestication_times, rep(NA, length(domestication_times[,1])))#
domestication_times[,9] <- domestication_times[,3]#
domestication_times[h,9] <- domestication_times[h,7]#
colnames(domestication_times)[9] <- "adopt exploitation date"#
domestication_times[,10] <- domestication_times[,7]#
domestication_times[which(is.na(domestication_times[,10])),10] <- 0#
colnames(domestication_times)[10] <- "start of ag"#
#save(domestication_times, file="~/Desktop/Human density and the origins of agriculture/Domestication timing larson 2014.Rdata")#
#
plot(0,0, xlim=c(15,0), ylim=c(-1,1))#
#
type_number <- 8#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
abline(v= maxer - quantile(j)[2])#
	break_one <- maxer#
			break_two <- maxer - quantile(j)[2]#
	polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
			lines(x=c(break_two, break_two), y=c(0,-1), col="white")#
dev.off()#
quartz(width=8, height=8)#
#pdf("~/Desktop/Human density and the origins of agriculture/Figure_1_Kavanagh_et_al_2017_GAM.pdf", width=8, height=8)#
#
layout(matrix(c(#
	1, 1, 1, 1, 1, 1, 1, 1,#
	3,	6, 7, 8, 9, 10, 11,	4, #
	3,	5, 5, 5, 5, 5, 5, 	4, #
	3, 	12, 13, 14, 15, 16, 17,	4,#
	2, 2, 2, 2, 2, 2, 2, 2#
	), 5, 8, byrow=TRUE), width=c(1, 1, 1, 1, 1, 1, 1, 1), height=c(0.5, 1, 1.5, 1, 0.5))#
#layout.show(a)#
par(mar=c(0,0,0,0))#
#
# 1-4 label margins#
blankplot <- function(){#
	plot(0,0, xlim=c(4,21), ylim=c(1, 1.25), bty="n", type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
blankplot()#
blankplot()#
blankplot()#
blankplot()#
frameplot <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(0, 2.25), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
#
frameplot_bottom <- function(){#
	plot(21:0,rep(0, 22), xlim=c(17,4), ylim=c(-0.25, 2), type="n", xaxt="n", yaxt="n", xlab="", ylab="")#
}#
origins <- readShapePoly('Origins_updated.shp')#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
as.character(origins$CONTINENT)#
#
#subset_order <- c(1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 17, 18)#
subset_order <- c(8, 10, 9, 5, 18, 7, 6, 20, 1, 2, 13, 16)#
origins_subset <- origins[subset_order,]#
origins_subset$CONTINENT#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/earth.png")#
png(file=paste("40962.png",sep=""),width=2000,height=1000, bg="transparent")#
par(mar=c(0,0,0,0))#
plot(seq(-180, 180, length.out = 19), seq(-90, 90, length.out = 19), type="n",xlim=c(-180, 180),ylim=c(-90, 90), xaxt="n")#
#
rasterImage(d, -180, -90, 180, 90, interpolate=TRUE, col=d)#
#
polygon(x=c(-180,-180, 180,180), y=c(-90, 90, 90, -90), col=adjustcolor("white", alpha=0.1))#
#rasterImage(d, -13.5, -13.5, 375, 375, interpolate=TRUE, col=d)#
plot(origins_subset, add=TRUE, col=adjustcolor("white", alpha=.8), xaxt="n", border="white", lwd=4) #still need to reproject!!!#
dev.off()#
#
d <- readPNG("~/Desktop/Human density and the origins of agriculture/40962.png")#
dim(d)#
par(mar=c(0,0,0,0))#
plot(0:360,0:360,type="n",xlim=c(20,360),ylim=c(65,295), yaxt="n", xaxt="n")#
rasterImage(d, -28.5, -13.5, 388, 375, interpolate=TRUE, col=d)#
axis(2, label=seq(-90, 90, length.out = 19), at=seq(1, 360, length.out = 19), las=1)#
mtext("latitude", 2, line=4, at=180)#
abline(h=seq(1, 360, length.out = 19), col=adjustcolor("grey10", alpha= 0.4), lwd=1)#
abline(h=180, col=adjustcolor("white", alpha= .5), lwd=1)#
load('~/Desktop/Human density and the origins of agriculture/PopD_all_December.rdata')#
#
# Extract the data#
prod.origin <- extract(PopD.ALL, origins_subset)#
#
library(matrixStats)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, colSds, na.rm = TRUE)#
#
## new values from Bruno's GAM model (produced in script called Population_Trend_per_y.R)#
means <- global.means#
sds <- global.gams#
#
names(means) <- origins_subset@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
#plot(origins)#
#means[[1]] +#
#sds[[1]]#
#scale(as.numeric(means[[1]]), center=FALSE)#
#
name_vector <- as.character(origins_subset@data$CONTINENT)#
#
####################
#
type_number <- 8#
#
complex_figure <- function(type_number, i, means, sds){#
if(i < 6)	polygon(x=c(12,12,8.2,8.2), y=c(-1,3,3,-1), col=adjustcolor("cornflowerblue", alpha=0.4), border=NA)					#
if(i > 5)	polygon(x=c(8.2,8.2,4.2,4.2), y=c(-1,3,3,-1), col=adjustcolor("limegreen", alpha=0.4), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 9]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- -c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq, type="l", ylim=c(-1,1))#
#polygon(c(0, x_seq), c(0, y_seq), border="black", col=adjustcolor("cornflowerblue", alpha=0.5))#
#abline(v= maxer - quantile(j)[2])#
	break_one_1 <- maxer#
			break_two_1 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_1, break_two_1, break_one_1, break_one_1), y=c(0, 1, 1, 0), col=adjustcolor("cornflowerblue", alpha=0.5), border=NA)#
	match <- domestication_times[ which(domestication_times$Region == levels(domestication_times$Region)[ type_number]), 10]#
	maxer <- max(match, na.rm=TRUE)#
	j <- ecdf(maxer-match)#
	print(j)#
x_seq <- rev(c(0,seq(0, maxer, length.out=100)))#
y_seq <- 2+c(0, j(seq(0, maxer, length.out=100)))#
#
#lines(x_seq, y_seq)#
#polygon(c(0, x_seq), c(2, y_seq), border="black", col=adjustcolor("limegreen", alpha=0.5))#
	break_one_2 <- maxer#
			break_two_2 <- maxer - quantile(j)[2]#
#	polygon(x=c(break_two_2, break_two_2, break_one_2, break_one_2), y=c(1, 2, 2, 1), col=adjustcolor("limegreen", alpha=0.5), border=NA)#
		#abline(v=11)#
	type <- 1#
		if(type == 1){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	#polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")#
	polygon(x=c(21:4,4:21), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
	if(type == 2){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x + 1 #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
#
if(type == 3){#
	x <- c(means[[i]] , means[[i]]  + abs(sds[[i]]), means[[i]]  - abs(sds[[i]]))#
	scaled <- x #scale(x , center=FALSE)#
	meanss <- scaled[1:18]#
	sdss_plus <- scaled[19:36]#
	sdss_minus <- scaled[37:54]#
	#abline(v=10, col="red")#
	length(scaled)#
	#lines(4:21, means[[i]] + sds[[i]])#
	polygon(x=c(4:21, 21:4), y=c(sdss_plus, rev(sdss_minus)), col=adjustcolor("firebrick", alpha=1), border="white")	#
	}#
means_long_y <- c(1,1,1,1,1, meanss)#
means_long_x <- c(0:4, 4:21)#
			break_one <- break_one_2#
			break_two <- break_two_2#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(1, 2, 2, 1), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(1.9, 3.1, 3.1, 1.9), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
				break_one <- break_one_1#
			break_two <- break_two_1#
		#		polygon(x=c(break_one, break_one, 22, 22), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0.8), border=NA)#
		#		polygon(x=c(break_two, break_two, break_one, break_one), y=c(0, 1, 1, 0), col=adjustcolor("white", alpha=0), border=NA)#
			#	polygon(x=c(-1,-1, break_two , break_two), y=c(-1.1, .1, .1, -1.1), col=adjustcolor("white", alpha=0.8), border=NA)	#
				#abline(v= break_one, col="white")#
				#abline(v= break_two, col="white")#
#lines(x=c(break_one_2, break_one_2), y=c(1,3), col="white")#
#lines(x=c(break_one_1, break_one_1), y=c(1,-1), col="white")#
#lines(x=c(break_two_2, break_two_2), y=c(1,3), col="white")#
#lines(x=c(break_two_1, break_two_1), y=c(1,-1), col="white") #
#lines(4:21, meanss)#
	lines(21:4, meanss)#
}#
for(i in 1:12){#
	if(i > 6){frameplot()}else{frameplot_bottom()}#
		## customize polygons for each graph#
	if(i == 1){ #mesoamerica  #values from Larson#
			complex_figure(3, i, means, sds)#
		}#
	##########
	if(i == 2 ){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if( i == 3){ #NW lowlands SA  #values from Larson#
		complex_figure(6, i, means, sds)#
		}#
		##########
	if(i == 4){ #Fertile crescent aka Southwest asia  #values from Larson#
	complex_figure(8, i, means, sds)#
		}#
		##########
	if(i == 5){ #loess plateau  #values from Larson#
		complex_figure(2, i, means, sds)#
		}#
		##########
	if(i == 6){ #new guinea  #values from Larson#
		complex_figure(4, i, means, sds)#
		}#
##########
	if(i == 7){ #Eastern N.A.  #values from Larson#
		complex_figure(5, i, means, sds)#
			}#
		##########
	if(i == 8){ #Andes  #values from Larson#
		complex_figure(6, i, means, sds)#
				}#
##########
	if(i == 9){ #W. African Sav  #values from Larson#
		complex_figure(1, i, means, sds)#
			}#
##########
	if(i == 10){ #Sudanic sav  #values from Larson#
		complex_figure(1, i, means, sds)#
				}#
##########
	if(i == 11){ #Ganges  #values from Larson#
		complex_figure(7, i, means, sds) #
		}#
##########
	if(i == 12){ #loess  #values from Larson#
		complex_figure(2, i, means, sds)#
		 		}#
		#lines(4:21, means[[i]])#
		abline(h = 1, col=adjustcolor("forestgreen", alpha=.5), lty=2)#
	# add axes to some locations#
	if(i == 1 | i == 7){axis(2, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	if(i == 6 | i == 12){axis(4, at=seq(0,2, by=0.25), label=seq(0,2, by=0.25), las=1)}#
	#if(i == 6 | i == 12){axis(4, at=seq(2,3, by=0.25), label=seq(0,1, by=0.25), las=1)#
	#	axis(4, at=seq(-1,0, by=0.25), label=rev(seq(0,1, by=0.25)), las=1)#
	#	}#
	if(i > 6){axis(1)} else{axis(3)}#
	# add text #
	if(i < 7){polygon(x=c(-30, -30, 30, 30), y=c(-0.1, -0.5, -0.5, -0.1), col="black")#
	mtext(name_vector[i], 1, line=-1.2, col="white", cex=0.5)}#
	if(i > 6){polygon(x=c(-30, -30, 30, 30), y=c(2.1, 2.5, 2.5, 2.1), col="black")#
	mtext(name_vector[i], 3, line=-1.2, col="white", cex=0.5)}#
	# add axis labels#
	if(i == 1 | i ==  7){mtext("scaled density potential", 2, line=4, at=1)}#
	if(i ==  3){mtext("Thousand years before present", 3, line=3.5, at =5)}#
	if(i ==  9){mtext("Thousand years before present", 1, line=3.5, at =5)#
		}#
}#
saveToPDF <- function(...) {#
    d = dev.copy(pdf,...)#
    dev.off(d)#
}#
#
saveToPNG <- function(...) {#
    d = dev.copy(png,...)#
    dev.off(d)#
}#
#
## Try them out#
#
saveToPDF("my.pdf", height=8,width=8)#
saveToPNG("my.png", height=8, width=8, units="in", res=300)#
dev.off()
# Load patricks productivity PCA data#
load('Productivity_ALL.RDATA')#
# Load origin shapefiles#
origins <- readShapePoly('Origins_updated.shp')#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
# Extract the data#
prod.origin <- extract(Productivity.ALL, origins)#
# Mean and SD per region#
means <- lapply(prod.origin, colMeans, na.rm = TRUE)#
sds <- lapply(prod.origin, sd, na.rm = TRUE)#
names(means) <- origins@data$CONTINENT#
ymax <- max(unlist(means))#
ymin <- min(unlist(means))#
time <- 4:21#
# Plot#
pdf("productivity.pdf", 20, 30) #
par(mfrow = c(7, 4), mar = c(5, 7, 5, 1))#
for (i in 1:length(means)) {#
  plot(y = means[[i]], x = time, xlim = c(21, 4), ylim = c(ymin, ymax),#
       main = names(means)[i], cex.main = 4, cex.lab = 3, cex.axis = 2,#
       ylab = "Productivity (PCA axis)", xlab = "Thousand of years ago (k)",#
       pch = 20, lwd = 1, type = "l", #
       col = c("purple", "green")[origin.time.region[i]])#
  up <- sds[[i]] + means[[i]]#
  down <-  means[[i]] - sds[[i]]#
  lines(up ~ time, lty = 2)#
  lines(down ~ time, lty = 2)#
}#
dev.off()
# Get the predctions from Population_trend script#
load("prediction.RData")#
# Read the polygons#
origins <- readShapePoly('Origins_updated.shp')#
#
# Extract data#
#
cells <- do.call(rbind, sapply(per.origin, subset, select = 1))#
cells#
g.means <- apply(prediction[-cells, ], 2, mean, na.rm = TRUE) #
g.gams <- apply(prediction[-cells, ], 2, sd, na.rm = TRUE)#
g.means2 <- apply(prediction[cells, ], 2, mean, na.rm = TRUE) #
g.gams2 <- apply(prediction[cells, ], 2, sd, na.rm = TRUE)#
#
pdf("Global_pop_trend_comparisson.pdf", width = 25, height = 20)#
par(mar = c(5, 7, 7, 5))#
plot(seq(0, 1, length.out = length(time)) ~ time, col = "white", main = "GLOBAL",#
     xlim = c(21, 4), ylab = "Population Density (standardized)", #
     xlab = "Thousand of years ago", cex.lab = 3, cex.main = 4, cex.axis = 2)#
down <- g.means - g.gams#
up <- g.means + g.gams#
lines(y = down, x = time, lty = 3, col = "gray40", lwd = 3)#
lines(y = up, x = time, lty = 3, col = "gray40", lwd = 3)#
lines(y = g.means, x = time, lwd = 4)#
#
lines(y = g.means2, x = time, lwd = 3, col = "red")#
down2 <- g.means2 - g.gams2#
up2 <- g.means2 + g.gams2#
lines(y = down2, x = time, lty = 3, col = "red", lwd = 3)#
lines(y = up2, x = time, lty = 3, col = "red", lwd = 3)#
polygon(cbind(c(12, 8.2, 8.2, 12, 12), c(-1, -1, 2, 2, -1)),#
        col = rgb(0, 1, 0, alpha = .2), border = F)#
polygon(cbind(c(8.2, 4.2, 4.2, 8.2, 8.2), c(-1, -1, 2, 2, -1)),#
        col = rgb(.28, 0, .28, alpha = .2), border = F)#
dev.off()#
# Betas#
# beta1[beta1 == 0] <- NA#
# beta2[beta2 == 0] <- NA#
# beta3[beta3 == 0] <- NA#
betas <- list(beta1, beta2, beta3)#
beta1 <- -beta1#
beta2 <- -beta2#
beta3 <- -beta3#
#
origin.time.region <- c(2, 2, 1, 1, 1, 2, 2, 1, 2, 2, #
                        2, 2, 1, 2, 2, 2, 2, 2, 2, 2) # 1 = early; 2 = middle#
cells1 <- do.call(rbind, sapply(per.origin[origin.time.region == 1]#
, subset, select = 1))#
cells2 <- do.call(rbind, sapply(per.origin[origin.time.region == 2]#
                                , subset, select = 1))#
#
pdf("Global_pop_beta_comparisson.pdf", width = 20, height = 30)#
par(mfrow = c(3, 1), mar = c(7, 7, 5, 5))#
hist(na.omit(beta1[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Early Holocene (12-8k)", xlim = c(-.5, .5), cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta1[cells1]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
legend(x = -0.4, y = 5, c("Non-origins", "Origins"), #
       fill = c(rgb(0, 1, 0, alpha = 1), rgb(0, 0, 1, alpha = .4)),#
       cex = 4)#
#
hist(na.omit(beta2[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Middle Holocene (8-4k)", xlim = c(-.5, .5), cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta2[cells2]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
hist(na.omit(beta3[-cells]), 15, freq = F, col = rgb(0, 1, 0, alpha = 1), border = F, #
     main = "Early-Middle Holocene (12-4k)", xlim = c(-.5, .5),cex.lab = 3, #
     cex.main = 3, cex.axis = 1.5, xlab = "Slope")#
hist(na.omit(beta3[cells]), 15, col = rgb(0, 0, 1, alpha = .4), add = TRUE, freq = F,#
     border = F)#
abline(v = 0, lty = 2)#
dev.off()
